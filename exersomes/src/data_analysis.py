# src/data_analysis.py
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import networkx as nx

def load_data():
    """Load all data files generated by Go program."""
    data = {
        "genes": pd.read_csv("gene_references.tsv", sep="\t"),
        "proteins": pd.read_csv("protein_info.tsv", sep="\t"),
        "pathways": pd.read_csv("pathway_maps.tsv", sep="\t"),
        "functions": pd.read_csv("functional_insights.tsv", sep="\t")
    }
    return data

def analyze_pathways(data):
    """Analyze pathway enrichment and connections."""
    pathways = data["pathways"]
    
    # Count genes per pathway
    pathway_counts = pathways.groupby(["Pathway_Name", "Pathway_Source"]).size().reset_index(name="Gene_Count")
    
    # Sort by gene count
    top_pathways = pathway_counts.sort_values("Gene_Count", ascending=False).head(20)
    
    # Create visualization
    plt.figure(figsize=(12, 8))
    sns.barplot(x="Gene_Count", y="Pathway_Name", data=top_pathways)
    plt.title("Top Enriched Pathways in Exerkines")
    plt.tight_layout()
    plt.savefig("pathway_enrichment.png")
    
    return top_pathways

def build_network(data):
    """Build a network of genes based on shared pathways."""
    pathways = data["pathways"]
    
    # Create graph
    G = nx.Graph()
    
    # Add genes as nodes
    for gene in pathways["Gene"].unique():
        G.add_node(gene)
    
    # Connect genes that share pathways
    pathway_groups = pathways.groupby("Pathway_Name")
    for _, group in pathway_groups:
        genes = group["Gene"].unique()
        # Connect all genes in this pathway
        for i in range(len(genes)):
            for j in range(i+1, len(genes)):
                if G.has_edge(genes[i], genes[j]):
                    # Increment weight if edge exists
                    G[genes[i]][genes[j]]['weight'] += 1
                else:
                    G.add_edge(genes[i], genes[j], weight=1)
    
    # Visualize network
    plt.figure(figsize=(15, 15))
    pos = nx.spring_layout(G, k=0.15, iterations=50)
    nx.draw_networkx_nodes(G, pos, node_size=200, alpha=0.8)
    edges = nx.draw_networkx_edges(G, pos, alpha=0.5)
    nx.draw_networkx_labels(G, pos, font_size=10)
    plt.axis('off')
    plt.savefig("gene_network.png", dpi=300)
    
    return G

if __name__ == "__main__":
    data = load_data()
    top_pathways = analyze_pathways(data)
    print("Top enriched pathways:")
    print(top_pathways)
    
    print("\nBuilding gene network...")
    network = build_network(data)
    print(f"Network has {network.number_of_nodes()} nodes and {network.number_of_edges()} edges")
    
    # Additional analyses can be added here